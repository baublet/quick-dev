type Query {
  user: User
  ping: String!
}

type Mutation {
  createEnvironment(
    input: EnvironmentMutationInput!
  ): EnvironmentMutationPayload!
}

scalar Date

input EnvironmentMutationInput {
  repositoryUrl: String!
}

type EnvironmentMutationPayload {
  errors: [String!]!
  environment: Environment
}

type Environment {
  id: ID!
  created: Date!
  updated: Date!
  deleted: Boolean!
  ipv4: String
  name: String!
  subdomain: String!
  size: String!
  lifecycleStatus: String!
  logs(input: PaginationInput): RepositoryConnection!
}

type User {
  id: ID!
  name: String!
  email: String!
  repositories: Repositories!
  environments: EnvironmentConnection!
}

type Repository {
  id: ID!
  name: String!
  gitUrl: String!
  htmlUrl: String!
}

input PaginationInput {
  perPage: Int
  page: Int
}

type Repositories {
  gitHub(input: PaginationInput): RepositoryConnection!
}

type EnvironmentConnection {
  totalCount: Int!
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Environment!]!
}

type EnvironmentLogConnection {
  totalCount: Int!
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [String!]!
}

type RepositoryConnection {
  totalCount: Int
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Repository!]!
}
