type Query {
  user: User
  environment(input: EnvironmentInput!): Environment
  ping: String!
  jobs: JobConnection!
  environmentCommandLogs(input: EnvironmentCommandLogsInput): EnvironmentCommand
}

type Mutation {
  createEnvironment(
    input: CreateEnvironmentMutationInput!
  ): EnvironmentMutationPayload!
  deleteEnvironment(
    input: DeleteEnvironmentMutationInput!
  ): EnvironmentMutationPayload!
}

scalar Date
scalar ID

input EnvironmentCommandLogsInput {
  environmentCommandId: ID!
  after: Float = 0
}

input CreateEnvironmentMutationInput {
  repositoryUrl: String!
}

input DeleteEnvironmentMutationInput {
  id: ID!
}

type EnvironmentMutationPayload {
  errors: [String!]!
  environment: Environment
}

enum EnvironmentCommandStatus {
  cancelled
  ready
  running
  sending
  failed
  success
}

enum EnvironmentLifecycleStatus {
  new
  creating
  provisioning
  finished_provisioning
  error_provisioning
  ready
}

type Environment {
  created: Date!
  deleted: Boolean!
  id: ID!
  ipv4: String
  lifecycleStatus: EnvironmentLifecycleStatus!
  logs: EnvironmentLogsConnection
  name: String!
  permissions: EnvironmentPermissions!
  processor: String
  repositoryUrl: String!
  repositoryHttpUrl: String!
  size: String!
  subdomain: String!
  updated: Date!
  url: String!
  working: Boolean!
}

type EnvironmentPermissions {
  canDelete: Boolean!
  canOpen: Boolean!
}

type User {
  id: ID!
  name: String!
  email: String!
  repositories: Repositories!
  environments: EnvironmentConnection!
}

input EnvironmentInput {
  id: ID!
}

type Repository {
  id: ID!
  name: String!
  gitUrl: String!
  htmlUrl: String!
}

input PaginationInput {
  perPage: Int
  page: Int
}

type Repositories {
  gitHub(input: PaginationInput): RepositoryConnection!
}

input EnvironmentCommandLogsNodeInput {
  after: Float
}

type EnvironmentCommand {
  id: ID!
  title: String!
  status: EnvironmentCommandStatus!
  logs(input: EnvironmentCommandLogsNodeInput): String
}

type EnvironmentLogsConnection {
  startupLogs: String
  commands: [EnvironmentCommand!]!
}

type EnvironmentConnection {
  totalCount: Int!
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Environment!]!
}

type EnvironmentLogConnection {
  totalCount: Int!
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [String!]!
}

type RepositoryConnection {
  totalCount: Int
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Repository!]!
}

type Job {
  id: ID!
  payload: String!
  type: String!
  status: String!
  processor: String
  history: String!
}

type JobEdge {
  cursor: ID!
  nodes: [Job!]!
}

type JobConnection {
  edges: [JobEdge!]!
}
