type Query {
  user: User
  environment(input: EnvironmentInput!): Environment
  ping: String!
  jobs: JobConnection!
  environmentCommandLogs(
    input: EnvironmentCommandLogsInput
  ): EnvironmentCommandLogConnection
}

type Mutation {
  createEnvironment(
    input: CreateEnvironmentMutationInput!
  ): EnvironmentMutationPayload!
  deleteEnvironment(
    input: DeleteEnvironmentMutationInput!
  ): EnvironmentMutationPayload!
  stopEnvironment(
    input: StopEnvironmentMutationInput!
  ): EnvironmentMutationPayload!
  startEnvironment(
    input: StartEnvironmentMutationInput!
  ): EnvironmentMutationPayload!
}

######################
# Scalars and enums  #
######################

scalar Date
scalar ID

enum EnvironmentCommandStatus {
  cancelled
  ready
  running
  sending
  failed
  success
}

enum EnvironmentLifecycleStatus {
  new
  creating
  error_creating
  provisioning
  finished_provisioning
  error_provisioning
  ready
  stopping
  stopped
  snapshotting
  starting_from_snapshot
}

##################
#     Inputs     #
##################

input EnvironmentCommandLogsInput {
  environmentCommandId: ID!
  after: String
  first: Int
  last: Int
  before: String
}

input CreateEnvironmentMutationInput {
  repositoryUrl: String!
}

input DeleteEnvironmentMutationInput {
  id: ID!
}

input StopEnvironmentMutationInput {
  id: ID!
}

input StartEnvironmentMutationInput {
  id: ID!
}

input EnvironmentInput {
  id: ID!
}

input PaginationInput {
  perPage: Int
  page: Int
}

input UserRepositoryInputFilters {
  popular: Boolean
}

input EnvironmentCommandLogsNodeInput {
  first: Int
  after: String
  last: Int
  before: String
}

###################
#     Types       #
###################

type Repository {
  id: ID!
  name: String!
  gitUrl: String!
  htmlUrl: String!
}

type Repositories {
  gitHub(
    filter: UserRepositoryInputFilters
    pageOptions: PaginationInput
  ): RepositoryConnection!
}

type EnvironmentCommand {
  id: ID!
  title: String!
  status: EnvironmentCommandStatus!
  logs(input: EnvironmentCommandLogsNodeInput): EnvironmentCommandLogConnection!
}

type PageInfo {
  totalCount: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type EnvironmentCommandLogConnection {
  pageInfo: PageInfo!
  edges: [EnvironmentCommandLogEdge!]!
}

type EnvironmentCommandLogEdge {
  cursor: String!
  node: EnvironmentCommandLog!
}

type EnvironmentLogsConnection {
  commands: [EnvironmentCommand!]!
}

type EnvironmentCommandLog {
  id: ID!
  logOutput: String!
}

type EnvironmentConnection {
  totalCount: Int!
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Environment!]!
}

type EnvironmentLogConnection {
  totalCount: Int!
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [String!]!
}

type RepositoryConnection {
  totalCount: Int
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Repository!]!
}

type Job {
  id: ID!
  payload: String!
  type: String!
  status: String!
  history: String!
}

type JobEdge {
  cursor: String!
  nodes: [Job!]!
}

type JobConnection {
  edges: [JobEdge!]!
}

type EnvironmentMutationPayload {
  errors: [String!]!
  environment: Environment
}

type Environment {
  created: Date!
  deleted: Boolean!
  id: ID!
  image: String!
  ipv4: String
  lifecycleStatus: EnvironmentLifecycleStatus!
  logs: EnvironmentLogsConnection
  name: String!
  permissions: EnvironmentPermissions!
  repositoryUrl: String!
  repositoryHttpUrl: String!
  size: String!
  subdomain: String!
  updated: Date!
  url: String!
  secret: String
  working: Boolean!
}

type EnvironmentPermissions {
  canDelete: Boolean!
  canOpen: Boolean!
  canStop: Boolean!
  canStart: Boolean!
}

type User {
  id: ID!
  name: String!
  email: String!
  repositories(input: UserRepositoryInputFilters): Repositories!
  environments: EnvironmentConnection!
  avatarUrl: String
}
